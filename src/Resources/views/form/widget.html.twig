{% block json_widget %}
    <div id="{{ id }}_errors"></div>
    <div id="{{ id }}_json"></div>
    <script>
        var {{ id }}schema = {{  schema|raw }}
        window.editor{{ id }}startval = null
        function {{ id }}_load(value, schema){
            var schema = (schema)? schema:{{  schema|raw }};
            JSONEditor.defaults.options.theme = '{{ theme }}';
            if(value){
                window.editor{{ id }}startval = value;
            }
            if(window.editor{{ id }}) {
                window.editor{{ id }}.destroy()
            }
            window.editor{{ id }} = new JSONEditor(document.getElementById("{{ id }}_json"),{
                schema: schema,
                disable_collapse: true,
                disable_properties: true,
                form_name_root: '{{ full_name }}',
                disable_edit_json: {{ disable_edit_json }},
                no_additional_properties: {{ no_additional_properties }},
                required_by_default: {{ required_by_default }},
                display_required_only: {{ display_required_only }}
            });

            if(value){
                window.editor{{ id }}.setValue(value);
            }else{
                window.editor{{ id }}.setValue(window.editor{{ id }}startval);
            }
            window.editor{{ id }}.on("change",  function() {
                var errors = window.editor{{ id }}.validate();
                $('#{{ id }}_errors').html("");
                if(errors.length) {
                    console.log(errors);
                    //$('#{{ id }}_errors').html("Erreur schema");
                }
            });
        };
        {{ id }}_load({{ value|json_encode()|raw }},{{ id }}schema);
    </script>
{% endblock %}

{% block lle_date_widget %}
    <input {% if placeholder %} placeholder="{{ placeholder }}" {% endif %} class="form-control" type="text" value="{{ value }}" id="{{id_date_picker}}" {{ block('widget_attributes') }}/>
    <script>
        $(function(){
            $('#{{id_date_picker}}').datepicker({
                defaultDate: '{{ value }}',
                dateFormat: '{{ date_format }}',
                {% if edit_month %} changeMonth: {{ edit_month }}, {% endif %}
                {% if edit_year %} changeYear: {{ edit_year }},{% endif %}
                beforeShowDay: function(date) {
                    var day = date.getDay();
                    return [(JSON.parse('{{ noday }}').indexOf(day) < 0), ''];
                },
                {% if min is not null %} minDate: {{ min|raw }}, {% endif %}
                {% if max is not null %} maxDate: {{ max|raw }}, {% endif %}
                {% if is_birthday %} yearRange : 'c-100:c+1', {% endif %}
            });
        });
    </script>
{% endblock %}

{% block signature_widget %}
    <style>.kbw-signature { width: 200px; height: 100px; }</style>
    <div class="row">
        <div class="col-md-12">
            <input type="hidden" name="{{full_name}}" id="{{id}}" value="{{ value|raw }}"/>
            <div class="canvas-signature" id="s{{id}}"></div>
            <div class="clearer button"><span>Effacer</span></div>
            <script>
                $("#s{{id}}").signature({syncField: "#{{id}}"});
                {% if value %}$('#s{{id}}').signature('draw',{{value|raw}});{%  endif %}

                $(".clearer").click(function() {
                    $("#s{{id}}").signature("clear");
                });
            </script>
        </div>
    </div>
{% endblock %}

{% block json_choice_widget %}
    {{- block('choice_widget') -}}
    {%  if json_field %}
        <script>
            $(function() {
                var {{ id }}init = {%  if(value) %}false{%  else %}true{%  endif %};
                $('#{{ id }}').change(function (e) {
                    $.ajax({
                        url: "{{ path(json_schema_route) }}",
                        data: {"data": $(this).val()},
                        method: "POST"
                    }).done(function (data) {
                        {{ json_field }}_load(({{ id }}init)? data.default:null, data.schema);
                        {{ id }}init = true;
                    });
                });
                $('#{{ id }}').change();
            });
        </script>
    {%  endif %}
{%  endblock %}

{% block url_autocomplete_widget %}
<div class="autocomplet-url"
{% for key, value in attr %}
	{{ key }} = "{{ value }}"
{%  endfor %}
>
<select id="{{name}}" name="{{full_name}}" class="form-control" data-{{name|lower}}-autocomplete-url-lle='{{ url }}'>
    <option value="{{value}}" selected="selected">{{ value_filter ? include(template_from_string( "{{ value |" ~ value_filter ~ "}}")) : value_label }}</option>
</select>

<script>
    $(document).ready(function() {
        var lleAutocompleteFields = $('[data-{{name|lower}}-autocomplete-url-lle]');

        lleAutocompleteFields.each(function() {
            var $this = $(this);
            var url = $this.data('{{name|lower}}-autocomplete-url-lle');

            // select2 config for easyadmin
            $this.select2({
                theme: 'bootstrap',
                ajax: {
                    url: url,
                    dataType: 'json',
                    xhrFields: {
                        withCredentials: true
                    },
                    delay: 250,

                    // paramètres GET
                    data: function (params) {
                        // the _ is here to force easyadmin return results even if query is empty
                        return { 'query': $.trim(params.term) || "_", 'page': params.page };
                    },

                    // analyse json reçu
                    processResults: function (data, params) {
                        return {
                            results: data.results,
                            pagination: {
                                more: data.has_next_page
                            }
                        };
                    }
                },
                placeholder: '{{placeholder|trans}}',
                width: 'resolve',
                allowClear: true
            });
        });
    })
</script>
</div>
{% endblock %}


{% block lego_gedmo_translatable_widget %}
    {% spaceless %}
        {% set fieldname = form.vars.name %}
        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                {% for locale in locales %}
                    {% set isActiveTab = (locale == currentlocale) ? 'active' : '' %}
                    {# TAB LABEL #}
                    <li class="{{ isActiveTab }}">
                        <a aria-expanded="true" href="{{ '#' ~ fieldname ~ '_' ~ locale }}" data-toggle="tab">
                            {{ tablabels[locale] }}
                        </a>
                    </li>
                {% endfor %}
            </ul>
            <div class="tab-content">
                {% for locale in locales %}
                    {% set isActiveTabContent = (locale == currentlocale) ? 'active' : '' %}
                    {# TAB CONTENT #}
                    <div class="tab-pane {{ isActiveTabContent }}" id="{{ fieldname ~ '_' ~ locale }}">
                        {{ form_widget(attribute(form, locale)) }}
                    </div>
                {% endfor %}
            </div>
        </div>
    {% endspaceless %}
{% endblock %}