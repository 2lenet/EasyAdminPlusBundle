{% extends '@BaseEasyAdmin/default/list.html.twig' %}

{# Do not display SEARCH form if not granted #}
{% block search_action %}
    {% if _entity_config.search is defined and is_easyadmin_granted(_entity_config, 'search') %}
        {# Do not display SEARCH at all #}
        {# { parent() } #}
    {% endif %}
{% endblock %}

{% block content_header %}
{{ parent() }}
{% if _entity_config.filter is defined %}

<div class="adminlist-filter">
    <form method="POST" action="{{ path('easyadmin', app.request.query|merge({ filter: "y" })) }}" class="form-horizontal ">

    <div class="box box-info">
        <div class="box-header with-border">
            <h4 class="box-title"><i class="icon fa fa-search"></i>&nbsp;{{'Rechercher'|trans({}, 'EasyAdminPlusBundle') }}</h4>
            <div class="box-tools pull-right">
              <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
            </div>
        </div><!-- /.box-header -->

        <div class="box-body">
          <div class="row">

          <!-- FILTER -->
          {% for filter in _entity_config.filter.fields %}
          <div class="col-lg-4 col-md-6 col-sm-6 col-xs-12 " style="min-height:50px">
                        <div class="form-group">
                            <label for="date" class="col-sm-4 control-label text-nowrap">
                                {{ filter.label|trans() }}
                            </label>
                            <div class="col-sm-8">
                              {% set vars = {'data': filter.filtertype.data, 'nameprefix': 'filter_', 'namesuffix':'_' ~ filter.code, 'filtertype':filter.filtertype} %}
                              {% include filter.template with vars %}
                            </div>
                        </div> <!-- form group -->
                    </div>
          {% endfor %}
          </div><!-- row -->
        </div><!-- box-body -->

        <div class="box-footer">
            <button class="btn btn-primary apply_filter" name="filter" value="filter" type="submit">{{'Filtrer'|trans({}, 'EasyAdminPlusBundle') }}</button>
            <button class="btn btn-default" name="reset" value="reset" type="submit">{{'Effacer'|trans({}, 'EasyAdminPlusBundle') }}</button>
        </div>
    </div>

    </form>
</div>
{% endif %}
{% endblock %}

{% block new_action %}

    <div class="button-action">

        {% if is_easyadmin_granted(_entity_config, 'new') %}
        <a class="{{ _action.css_class|default('') }}" href="{{ path('easyadmin', _request_parameters|merge({ action: _action.name })) }}" target="{{ _action.target }}">
            {% if _action.icon %}<i class="fa fa-{{ _action.icon }}"></i>{% endif %}
            {{ _action.label is defined and not _action.label is empty ? _action.label|trans(_trans_parameters) }}
        </a>
        {% endif %}
        {% if _entity_config.export is defined and is_easyadmin_granted(_entity_config, 'export') %}
            {% set referer = app.request.server.get('http-referer')|default('/') %}
            {%  for format in _entity_config.export.formats %}
                <a class="btn btn-primary" style="margin-right:5px;" href="{{ path('easyadmin', app.request.query|merge({ action: "export", format: format })) }}">
                    <i class="fa fa-download"></i>
                    {{ 'exporter.export'|trans({'%format%':format}, 'EasyAdminPlusBundle') }}
                </a>
            {%  endfor %}
        {% endif %}
    </div>

{% endblock %}


{% block body_javascript %}
    {{ parent() }}
    <script type="text/javascript">
    $(document).ready(function(){

        $("body.list .table-responsive table.table").treetable({ expandable: true, nodeIdAttr: 'id', parentIdAttr: 'parentId' });
    });

    var lle = {
        dialog: function(title,msg){
            $('<div>'+msg+'</div>').dialog({title:title});
        },

        ajaxForm: function( $form, callback, type , elm, action){
          var values = {};
          var type = (type)? type:'json';
          var formdata = (window.FormData) ? new FormData($form[0]) : null;
          var data = (formdata !== null) ? formdata : $form.serialize();
          var action = (action)? action:$form.attr( 'action' );
          /*$.each( $form.serializeArray(), function(i, field) {
            values[field.name] = field.value;
          });*/
          $.ajax({
            type        : $form.attr( 'method' ),
            url         : action,
            contentType : false, // obligatoire pour de l'upload
            processData : false, // obligatoire pour de l'upload
            data        : data,
            dataType    : type,
            success     : function(data) {
              //var offset = $(field.id).offset().top
              //$('html, body').animate({scrollTop: offset}, 'slow');
              if(elm){
                callback( elm, data );
              }else{
                callback( data );
              }

            }
          });
        },

        ajax: function(elm){
            var type = (elm.attr('data-type'))? elm.attr('data-type'):'json';
            if(elm.attr('data-confirm')){
            if(!confirm(elm.attr('data-confirm'))) return;
            }
            var callback = window[elm.attr('data-callback')];
            var preCallback = (elm.attr('data-pre-callback'))? window[elm.attr('data-pre-callback')]:null;
            var errCallback = (elm.attr('data-err-callback'))? window[elm.attr('data-err-callback')]:null;
            if(preCallback){
                preCallback(elm);
            }
            var url = (elm.attr('data-url'))? elm.attr('data-url'):elm.attr('href');
            var name = (elm.attr('name'))? elm.attr('name'):null;
            var method = (elm.attr('data-method'))? elm.attr('data-method'):'post';
            var values = {};
            if(elm.attr('data-group')) {
              $(elm.attr('data-group')).each(function () {
                  if ($(this).attr('type') == 'radio') {
                      if ($(this).is(':checked')) values[$(this).attr('name')] = $(this).val();
                  } else if ($(this).attr('type') == 'checkbox') {
                      if ($(this).is(':checked')) {
                          if (!values[$(this).attr('name')]) values[$(this).attr('name')] = [];
                          values[$(this).attr('name')].push($(this).val());
                      }
                  } else {
                      values[$(this).attr('name')] = $(this).val();
                  }
              });
            }
            name = (elm.attr('data-name'))? elm.attr('data-name'):elm.attr('name');
            var donnes = (elm.attr('data-donnes'))? JSON.parse(elm.attr('data-donnes').replace(/\'/gi,'"')):[];
            var data = {'data':donnes,'value':elm.val(),'values':values,'name':name};
            if(elm.attr('data-no')) data = null;
            $.ajax({
                type        : method,
                url         : url,
                data        : data,
                dataType    : type,
                success     : function(data) {
                    if (callback) callback(elm, data);
                },
                error : function(xhr, ajaxOptions, thrownError){
                    if (errCallback) errCallback(elm, xhr, ajaxOptions, thrownError);
                }
            });
        },

        filter_set_button: function(id, id_button, val) {

          $(id).val(val);
          $(id_button + ' .fa').hide();
          $(id_button + ' .'+val).show();
          return false;
        }
    }

    </script>

    {{ include('@EasyAdmin/default/includes/_select2_widget.html.twig') }}
{% endblock %}

{% block table_body %}

    {# Initialize #}
    {% if _entity_config.tree is defined and _entity_config.tree %}
        {% set levelShift = (paginator.currentPageResults|first).level %}
        {% set tree_parents = [] %}
        {% set previous_item = null %}
        {% set parent_id = null %}
    {% endif %}

    {% for item in paginator.currentPageResults %}
        {# the empty string concatenation is needed when the primary key is an object (e.g. an Uuid object) #}
        {% set _item_id = '' ~ attribute(item, _entity_config.primary_key_field_name) %}

        {# TREE MANAGMENT #}
        {% if _entity_config.tree is defined and _entity_config.tree %}
            {% if previous_item %}
                {% if previous_item.rgt > item.lft %}{# we go up #}
                    {% set parent_id = previous_item.id %}
                    {% set tree_parents = tree_parents|merge([{
                        'id':previous_item.id,
                        'lft':previous_item.lft,
                        'rgt':previous_item.rgt}]) %}
                {% else %}
                    {% set tree_parents = tree_parents|slice(0, item.level - levelShift) %}
                    {% set parent = tree_parents|last %}
                    {% set parent_id = parent.id %}
                {% endif %}
            {% endif %}
        {% endif %}
        
        {# ROW #}
        <tr data-id="{{ _item_id }}" {% if parent_id %}data-parent-id="{{parent_id}}" {% endif %}>
            {# FIELDS #}
            {% for field, metadata in fields %}
                {% set isSortingField = metadata.property == app.request.get('sortField') %}
                {% set _column_label =  (metadata.label ?: field|humanize)|trans(_trans_parameters)  %}

                <td data-label="{{ _column_label }}" class="{{ isSortingField ? 'sorted' }} {{ metadata.dataType|lower }} {{ metadata.css_class }}" {{ easyadmin_config('design.rtl') ? 'dir="rtl"' }}>
                    {%  if metadata.link is defined %}
                        <a href="{{ path('easyadmin', app.request.query|merge({ action: metadata.link,id: item.id })) }}">
                    {%  endif %}
                    {{ easyadmin_render_field_for_list_view(_entity_config.name, item, metadata) }}
                    {%  if metadata.link is defined %}</a>{% endif %}
                </td>
            {% endfor %}

            {# ACTIONS #}
            {% if _list_item_actions|length > 0 %}
                {% set _column_label =  'list.row_actions'|trans(_trans_parameters, 'EasyAdminBundle') %}
                <td data-label="{{ _column_label }}" class="actions">
                {% block item_actions %}
                    {% set _list_item_actions = _list_item_actions|prune_item_actions(_entity_config) %}
                    {{ include('@EasyAdmin/default/includes/_actions.html.twig', {
                        actions: _list_item_actions,
                        request_parameters: _request_parameters,
                        translation_domain: _entity_config.translation_domain,
                        trans_parameters: _trans_parameters,
                        item_id: _item_id
                    }, with_context = false) }}
                {% endblock item_actions %}
                </td>
            {% endif %}
        </tr>
        {# END ROW #}
        
        {% set previous_item = item %}

    {# NO RESULTS #}
    {% else %}
        <tr>
            <td class="no-results" colspan="{{ _list_item_actions|length > 0 ? fields|length + 1 : fields|length }}">
                {{ 'search.no_results'|trans(_trans_parameters, 'EasyAdminBundle') }}
            </td>
        </tr>
    {% endfor %}

{% endblock table_body %}

