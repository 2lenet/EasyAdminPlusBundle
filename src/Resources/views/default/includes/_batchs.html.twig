<div class="row">
    <div class="col-md-12 btn-group pull-left open">
        <div class="dropup">
              <button class="btn btn-default dropdown-toggle" id="dropdownBatchActionButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                {{ 'label.batchActions.title'|trans }}
                <span class="caret"></span>
              </button>
              
                <ul class="dropdown-menu" aria-labelledby="dropdownBatchActionButton">
                    {% for action, actiondata in _entity_config.list.batchs %}
                        {% if actiondata.role is null or is_granted(actiondata.role) %}
                                <li><a href="javascript:void(0)" 
                                    {% if actiondata.viewForm is defined %}
                                        onclick="showBatchForm('{{actiondata.name}}')" 
                                    {% else %}
                                        onclick="return doBulkAction('{{ path('easyadmin', app.request.query|merge({ action: "batch", name: action })|merge(actiondata.params)) }}')" 
                                    {% endif %}
                                    >
                                    {% if actiondata.icon is not null %}
                                        <i class="fa fa-{{ actiondata.icon }} }}"></i> {{ (actiondata.label)|trans }}
                                    {% else %}
                                        {{ (actiondata.label)|trans }}
                                    {% endif %}
                                </a></li>
                        {% endif %}
                    {% endfor %}
              </ul>
        </div>
        {% for action, actiondata in _entity_config.list.batchs %}
            {% if (actiondata.role is null or is_granted(actiondata.role)) and actiondata.viewForm is defined %}
                   <div id="batch_{{actiondata.name}}" class="hidden batchForms">
                        <div class="pull-left">
                            <b>{{ (actiondata.label)|trans }}</b>
                            {% set form = actiondata.viewForm %}
                            {{ form(form) }}
                            
                        </div>
                        <div class="pull-left">
                            <button class="btn btn-default"  onclick="return doBulkAction('{{ path('easyadmin', app.request.query|merge({ action: 'batch', name: action })|merge(actiondata.params)) }}')" >{{'batch.execute'|trans}}</button>
                        </div>
                    </div>

            {% endif %}
        {% endfor %}

    </div>
</div>
<script>
    function doBulkAction(url) {
        document.bulkform.action = url;
        document.bulkform.submit();

        return false;
    }


    function validateBulkCheckboxes() {
        var allChecked = true;
        var oneChecked = false;

        var checkboxes = document.querySelectorAll('.js-bulk-checkbox');
        for (var i=0; i<checkboxes.length; i++) {
            var cb = checkboxes[i];
            if (cb.checked == true) {
                oneChecked = true;
            } else {
                allChecked = false;
            }
        }

        $('#js-all-bulk-checkbox').prop('checked', allChecked);

        if (oneChecked) {
            $('.js-bulk-button').removeClass('disabled');
        } else {
            $('.js-bulk-button').addClass('disabled');
        }
    }

    function showBatchForm(name) {
        $('.js-bulk-button').addClass('hidden');
        if(name){
                $('#batch_'+name).removeClass('hidden');
        }

    }

    var allCheckbox = document.getElementById('js-all-bulk-checkbox');
    allCheckbox.onchange = function() {
        if (allCheckbox.checked == true) {
            $('.js-bulk-checkbox').prop('checked', true);
            $('.js-bulk-button').removeClass('disabled');
        } else {
            $('.js-bulk-checkbox').prop('checked', false);
            $('.js-bulk-button').addClass('disabled');
        }
    };

    var checkboxes = document.querySelectorAll('.js-bulk-checkbox');
    for (var key in checkboxes) {
        checkboxes[key].onchange = validateBulkCheckboxes;
    }
</script>